import numpy as np
from pgmpy.models import BayesianModel
from pgmpy.factors.discrete import TabularCPD

# Define the model structure
model = BayesianModel([('Burglary', 'Alarm'), ('Earthquake', 'Alarm'), ('Alarm', 'JohnCalls'), ('Alarm', 'MaryCalls')])

# Define the conditional probability distributions
cpd_burglary = TabularCPD(variable='Burglary', variable_card=2, values=[[0.50], [0.50]])
cpd_earthquake = TabularCPD(variable='Earthquake', variable_card=2, values=[[0.998], [0.002]])
cpd_alarm = TabularCPD(variable='Alarm', variable_card=2, evidence=['Burglary', 'Earthquake'], evidence_card=[2, 2], values=[[0.999, 0.71, 0.06, 0.05], [0.001, 0.29, 0.94, 0.95]])
cpd_john_calls = TabularCPD(variable='JohnCalls', variable_card=2,
                            evidence=['Alarm'], evidence_card=[2],
                            values=[[0.95, 0.1], [0.05, 0.9]])
cpd_mary_calls = TabularCPD(variable='MaryCalls', variable_card=2,
                            evidence=['Alarm'], evidence_card=[2],
                            values=[[0.99, 0.3], [0.01, 0.7]])

# Add the conditional probability distributions to the model
model.add_cpds(cpd_burglary, cpd_earthquake, cpd_alarm, cpd_john_calls, cpd_mary_calls)

# Check if the model is valid
if model.check_model():
    print("Model is valid")
else:
    print("Model is not valid")

# Print some properties of the model
print("Local Independencies of Burglary:", model.local_independencies('Burglary'))
print("Edges of the model:", model.edges())
print("Nodes of the model:", model.nodes())
